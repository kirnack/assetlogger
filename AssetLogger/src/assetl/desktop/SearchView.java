/*
 * SearchView.java
 *
 * Created on Apr 2, 2010, 8:42:50 PM
 */
package assetl.desktop;

import java.util.AbstractMap;
import java.util.HashMap;
import javax.swing.JTextField;

import assetl.system.AssetLControl;
import assetl.system.DataPacket;

/**
 * Allows an Admin to search through borrower history. A list
 * of past borrowers of a laptop can be shown or a list
 * of past laptops checked out to a person.
 * 
 * @author Devin Doman
 */
public class SearchView
   extends AssetView
{
   /**
    * Maps a functionality to a PacketGenerator that will
    * produce the DataPacket the function needs
    */
   AbstractMap<String, PacketGenerator> mPacketMap;

   /**
    * Constructor for the user interface
    *
    * @param pControl The controller for this view
    */
   public SearchView(AssetLControl pControl)
   {
      super(pControl);
      initComponents();
      generatePacketMap();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      mItemList = new javax.swing.JList();
      mDataFld = new javax.swing.JTextField();
      mSearchBtn = new javax.swing.JButton();
      jLabel1 = new javax.swing.JLabel();
      mDataLbl = new javax.swing.JLabel();
      mSearchLbl = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      jScrollPane1.setName("jScrollPane1"); // NOI18N

      mItemList.setName("mItemList"); // NOI18N
      jScrollPane1.setViewportView(mItemList);

      mDataFld.setName("mDataFld"); // NOI18N

      mSearchBtn.setText("Search");
      mSearchBtn.setName("mSearchBtn"); // NOI18N

      jLabel1.setText("Items:");
      jLabel1.setName("jLabel1"); // NOI18N

      mDataLbl.setText("Enter:");
      mDataLbl.setName("mDataLbl"); // NOI18N

      mSearchLbl.setText("Search");
      mSearchLbl.setName("mSearchLbl"); // NOI18N

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(mDataLbl)
                           .addComponent(mDataFld, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(mSearchBtn)))
                  .addGap(69, 69, 69)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel1)
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(layout.createSequentialGroup()
                  .addGap(152, 152, 152)
                  .addComponent(mSearchLbl)))
            .addContainerGap(47, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(22, 22, 22)
                  .addComponent(mSearchLbl)
                  .addGap(14, 14, 14)
                  .addComponent(jLabel1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(layout.createSequentialGroup()
                  .addGap(60, 60, 60)
                  .addComponent(mDataLbl)
                  .addGap(18, 18, 18)
                  .addComponent(mDataFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(43, 43, 43)
                  .addComponent(mSearchBtn)))
            .addContainerGap(65, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel jLabel1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTextField mDataFld;
   private javax.swing.JLabel mDataLbl;
   private javax.swing.JList mItemList;
   private javax.swing.JButton mSearchBtn;
   private javax.swing.JLabel mSearchLbl;
   // End of variables declaration//GEN-END:variables

   /**
    * Returns the data text field in the view
    *
    * @return The data text field
    */
   public JTextField getDataFld()
   {
      return mDataFld;
   }

   /**
    * Updates the views display of the model
    */
   public void updateData()
   {
   }

   /**
    * Creates the map between functions and the PacketGenerator it needs
    */
   public void generatePacketMap()
   {
      PacketGenerator gen = null;
      mPacketMap = new HashMap<String, PacketGenerator>();

      gen = new SearchAssetGrabber(this);
      mPacketMap.put("SearchBorrowers", gen);
      gen = new SearchPersonGrabber(this);
      mPacketMap.put("SearchAssetHistory", gen);
   }

   /**
    * Grabs all pertainent data from the fields and sets them in
    * a DataPacket object. This DataPacket is then returned by the
    * method.
    *
    * @param pFunction The function that needs the DataPacket
    * @return The DataPacket that has been set
    */
   public DataPacket grabDataPacket(String pFunction)
   {
      SearchDataGrabber grabber = null;
      grabber = (SearchDataGrabber) mPacketMap.get(pFunction);
      return grabber.grab();
   }

   /**
    * Enables functionality passed in for this view.
    */
   public void enable(String pFunction)
   {
   }

   /**
    * The entry point for this view
    */
   public void run()
   {
   }
}
