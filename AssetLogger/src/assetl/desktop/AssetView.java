/*
 * AssetView.java
 *
 * Created on Mar 14, 2010, 4:49:04 PM
 */

package assetl.desktop;

import assetl.system.AssetLControl;
import assetl.system.AssetLView;
import assetl.system.DBPacket;
import assetl.system.DataPacket;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;
import javax.swing.AbstractButton;


/**
 * An abstract class containing a JMenu
 * common to all view subclasses
 *
 * @author Devin Doman
 */
public abstract class AssetView
        extends JFrame
        implements AssetLView, Runnable
{

    /**
     * The Controller
     */
    protected AssetLControl mControl;

    /**
     * The data packet that can be sent to the controller
     */
    protected DataPacket mPacket;

    /**
     * The database packet of data
     */
    protected DBPacket mData;

    /**
     * In place for dynamic class loading. Assumes the controller
     * will immediately be set by the controller that dynamically loaded
     * the view
     */
    public AssetView()
    {
        this(null, "Asset Logger");
    }

    /**
     * Constructor that takes the view's controller as a parameter
     *
     * @param pControl The controller for this view
     */
    public AssetView(AssetLControl pControl)
    {
        this(pControl, "Asset Logger");
    }

    /**
     * Constructor that takes the form's title and controller as parameters
     *
     * @param pControl The controller for this view
     * @param pTitle The title to give the view
     */
    public AssetView(AssetLControl pControl, String pTitle)
    {
        super(pTitle);
        initComponents();
        mControl = pControl;

        //Set a DBPacket
        mData = new DBPacket();
        mPacket = mData;

        //
        // add action listeners to the menu items
        //

        enableSwitch("Checkout", ckOutMenuItem);
        enableSwitch("Checkin", ckInMenuItem);
        enableSwitch("Schedule", scheduleMenuItem);
        enableSwitch("Cancel", cancelMenuItem);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        viewMenu = new javax.swing.JMenu();
        ckOutMenuItem = new javax.swing.JMenuItem();
        ckInMenuItem = new javax.swing.JMenuItem();
        scheduleMenuItem = new javax.swing.JMenuItem();
        cancelMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mMenuBar.setName("mMenuBar"); // NOI18N

        jMenu1.setText("File");
        jMenu1.setName("jMenu1"); // NOI18N
        mMenuBar.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.setName("jMenu2"); // NOI18N
        mMenuBar.add(jMenu2);

        viewMenu.setText("View");
        viewMenu.setName("viewMenu"); // NOI18N

        ckOutMenuItem.setText("Checkout");
        ckOutMenuItem.setName("ckOutMenuItem"); // NOI18N
        viewMenu.add(ckOutMenuItem);

        ckInMenuItem.setText("Checkin");
        ckInMenuItem.setName("ckInMenuItem"); // NOI18N
        viewMenu.add(ckInMenuItem);

        scheduleMenuItem.setText("Schedule");
        scheduleMenuItem.setName("scheduleMenuItem"); // NOI18N
        viewMenu.add(scheduleMenuItem);

        cancelMenuItem.setText("Cancel");
        cancelMenuItem.setName("cancelMenuItem"); // NOI18N
        viewMenu.add(cancelMenuItem);

        mMenuBar.add(viewMenu);

        setJMenuBar(mMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem cancelMenuItem;
    private javax.swing.JMenuItem ckInMenuItem;
    private javax.swing.JMenuItem ckOutMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar mMenuBar;
    private javax.swing.JMenuItem scheduleMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

    /**
     * Allows the controller to set the controller for the view
     */
    public void setControl(AssetLControl pControl)
    {
        mControl = pControl;
    }

    /**
     * Allow the Controller to show the View
     */
    public void showView()
    {
        run();
        setVisible(true);
    }

    /**
     * Allow the Controller to hide the View
     */
    public void hideView()
    {
        setVisible(false);
    }

    /**
     * Allow the Controller to close the View
     */
    public void closeView()
    {
        dispose();
    }

    /**
     * Shows the menu bar
     */
    public void showMenuBar()
    {
        mMenuBar.setVisible(true);
    }

    /**
     * Hides the menu bar
     */
    public void hideMenuBar()
    {
        mMenuBar.setVisible(false);
    }

    /**
     * Allows the controller to turn on admin abilities in a view
     */
    public void enableAdmin()
    {
        showMenuBar();
    }

    /**
     * Allows the controller to turn off admin abilities in a view
     */
    public void disableAdmin()
    {
        hideMenuBar();
    }

    /**
     * Prepopulates the fields with the data currently held
     * in the member variables or with those in the model.
     * To enable this subclasses must override.
     * @throws UnsupportedOperationException
     */
    public void populateFields()
            throws UnsupportedOperationException
    {
        throw new UnsupportedOperationException("Prepopulate not supported");
    }

    /**
     * Allows the controller to switch to a view that has the functionality
     * provided
     */
    public void switchFunction(String pFunction)
    {
        mControl.setFunction(pFunction);
    }

    /**
     * Enables functionality passed in for this view.
     */
    public abstract void enable(String pFunction);

    /**
     * Enables functionality on the AbstractButton passed in
     *
     * @param pFunction The function to enable
     * @param pItem The component to give functionality to
     */
    public void enable(String pFunction, AbstractButton pItem)
    {
        // TODO: make sure the function passed in is supported in this view
        // and make the labels of the button and title pretty

        setTitle(pFunction);
        pItem.setText(pFunction);

        //remove all previous action listeners
        removeActionListeners(pItem);

        //add a function action listener
        pItem.addActionListener(new FunctionListener(pFunction));
    }

    /**
     * Enables a component to listen for a request in functionality change.
     *
     * @param pFunction The function to switch for
     * @param pItem The component to add a listener for
     */
    public void enableSwitch(String pFunction, AbstractButton pItem)
    {
        //remove all previous action listeners
        removeActionListeners(pItem);

        //add a function action listener
        pItem.addActionListener(new SwitchListener(pFunction));
    }

    /**
     * Removes all event listeners from a button
     *
     * @param pButton The button to remove listeners from
     */
    public void removeActionListeners(AbstractButton pButton)
    {
        //
        // Get all listeners and then remove each one
        //

        ActionListener[] actions = pButton.getActionListeners();

        for (ActionListener listen : actions)
        {
            pButton.removeActionListener(listen);
        }
   }

    /**
     * Listens for when the user needs to change the functionality of the view
     */
    public class SwitchListener
            implements ActionListener
    {
        /**
         * The function for the controller to switch to
         */
        String mFunction;
        
        /**
         * Sets the function to switch to
         * 
         * @param pFunction The function to switch to
         */
        public SwitchListener(String pFunction)
        {
            mFunction = pFunction;
        }
        
        /**
         * Has the controller modify or switch to a view 
         * with the functionality given.
         * 
         * @param ev The causing action
         */
        public void actionPerformed(ActionEvent ev)
        {
            switchFunction(mFunction);
        }
    }

    /**
     * Listens for when the user pushed the button with the given function.
     * It then sends a DataPacket to the controller and delegates to the
     * controller perform the specified function.
     */
    public class FunctionListener
            implements ActionListener
    {
        /**
         * The function this button is to perform
         */
        String mFunction;

        /**
         * Sets the function for this button
         *
         * @param pFunction The function to set the button with
         */
        public FunctionListener(String pFunction)
        {
            mFunction = pFunction;
        }

        /**
         * Has controller change the functionality to perform, sends
         * the controller a DataPacket, then delegates to the controller
         * to perform the function.
         *
         * @param ev The causing action
         */
        public void actionPerformed(ActionEvent ev)
        {
            mControl.setFunction(mFunction);
            mControl.doFunction(mPacket);
            System.err.println("User pushed the " + mFunction + " button");
        }
    }
}