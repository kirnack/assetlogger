/*
 * AssetView.java
 *
 * Created on Mar 14, 2010, 4:49:04 PM
 */

package assetl.system;

import java.util.Date;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;


/**
 * An abstract class containing a JMenu
 * common to all view subclasses
 *
 * @author Devin Doman
 */
public abstract class AssetView
        extends JFrame
        implements AssetLView
{

    /**
     * The Controller
     */
    protected AssetLControl mControl;

    /**
     * The current person
     */
    protected Person mPerson;

    /**
     * The current laptop
     */
    protected Asset mLaptop;

    /**
     * The desired start date
     */
    protected Date mStart;

    /**
     * The desired end date
     */
    protected Date mEnd;

    /**
     * Constructor that takes the view's controller as a parameter
     *
     * @param pControl The controller for this view
     */
    public AssetView(AssetLControl pControl)
    {
        this(pControl, "Asset Logger");
    }

    /**
     * Constructor that takes the form's title and controller as parameters
     *
     * @param pControl The controller for this view
     * @param pTitle The title to give the view
     */
    public AssetView(AssetLControl pControl, String pTitle)
    {
        super(pTitle);
        initComponents();
        mControl = pControl;

        //
        // add action listeners to the menu items
        //
        
        ckOutMenuItem.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent ev)
            {
                switchCheckout();
            }
        });

        ckInMenuItem.addActionListener(new ActionListener()
        {
           public void actionPerformed(ActionEvent ev)
           {
               switchCheckin();
           }
        });

        scheduleMenuItem.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent ev)
            {
                switchSchedule();
            }
        });

        cancelMenuItem.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent ev)
            {
                switchCancel();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        viewMenu = new javax.swing.JMenu();
        ckOutMenuItem = new javax.swing.JMenuItem();
        ckInMenuItem = new javax.swing.JMenuItem();
        scheduleMenuItem = new javax.swing.JMenuItem();
        cancelMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText("File");
        jMenu1.setName("jMenu1"); // NOI18N
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.setName("jMenu2"); // NOI18N
        jMenuBar1.add(jMenu2);

        viewMenu.setText("View");
        viewMenu.setName("viewMenu"); // NOI18N

        ckOutMenuItem.setText("Checkout");
        ckOutMenuItem.setName("ckOutMenuItem"); // NOI18N
        viewMenu.add(ckOutMenuItem);

        ckInMenuItem.setText("Checkin");
        ckInMenuItem.setName("ckInMenuItem"); // NOI18N
        viewMenu.add(ckInMenuItem);

        scheduleMenuItem.setText("Schedule");
        scheduleMenuItem.setName("scheduleMenuItem"); // NOI18N
        viewMenu.add(scheduleMenuItem);

        cancelMenuItem.setText("Cancel");
        cancelMenuItem.setName("cancelMenuItem"); // NOI18N
        viewMenu.add(cancelMenuItem);

        jMenuBar1.add(viewMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem cancelMenuItem;
    private javax.swing.JMenuItem ckInMenuItem;
    private javax.swing.JMenuItem ckOutMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem scheduleMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables

    /**
     * Allow the Controller to show the View
     */
    public void showView()
    {
        setVisible(true);
    }

    /**
     * Allow the Controller to hide the View
     */
    public void hideView()
    {
        setVisible(false);
    }

    /**
     * Allow the Controller to close the View
     */
    public void closeView()
    {
        dispose();
    }

    /**
     * Delagates to the controller a switch to checkout functionality
     */
    public void switchCheckout()
    {
        mControl.changeCheckout();
    }

    /**
     * Delagates to the controller a switch to checkin functionality
     */
    public void switchCheckin()
    {
        mControl.changeCheckin();
    }

    /**
     * Delagates to the controller a switch to schedule functionality
     */
    public void switchSchedule()
    {
        mControl.changeSchedule();
    }

    /**
     * Delagates to the controller a switch to cancel functionality
     */
    public void switchCancel()
    {
        mControl.changeCancel();
    }

    /**
     * The default behavior is to throw an exception.
     * If a view has the ability to checkout it must override this method.
     */
    public void enableCheckout()
            throws UnsupportedOperationException
    {
        throw new UnsupportedOperationException("This view can't checkout");
    }

    /**
     * The default behavior is to throw an exception.
     * If a view has the ability to checkin it must override this method.
     */
    public void enableCheckin()
            throws UnsupportedOperationException
    {
        throw new UnsupportedOperationException("This view can't checkin");
    }

    /**
     * The default behavior is to throw an exception.
     * If a view has the ability to schedule it must override this method.
     */
    public void enableSchedule()
            throws UnsupportedOperationException
    {
        throw new UnsupportedOperationException("This view can't schedule");
    }

    /**
     * The default behavior is to throw an exception.
     * If a view has the ability to cancel it must override this method.
     */
    public void enableCancel()
            throws UnsupportedOperationException
    {
        throw new UnsupportedOperationException("This view can't cancel");
    }
}